<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xunyanhui.dao.EvaluateDao">
<!-- 用于实现评论有关的操作，包括小样评论，演艺评论与艺人打分 -->
	
	<!-- 用于判断用对指定的小样或作品/演艺/是否点赞和好评-->
	<select id="isGoodLevel" parameterType="java.util.Map" resultType="Integer">
	select count(*)
	from evaluation_details
	where objectid=#{objectid} and releaseid=#{releaseid} and typename='1' and evaluatetype=#{evaluatetype}
	</select>
	<!-- 对指定的小样或作品/演艺/进行点赞或好评-->
	<update id="inGoodLevel" parameterType="java.util.Map" >
		update evaluation_details set evalevel=#{state}
		where objectid=#{objectid} and releaseid=#{releaseid} and typename='1' and evaluatetype=#{evaluatetype}
	</update>
	<!-- 对指定的小样或作品/演艺新建点赞或好评-->
	<insert id="newGoodLevel" parameterType="java.util.Map" >
		insert evaluation_details(id,typename,objectid,releaseid,evaluatetype,evalevel,releasetime)
		values(#{id},1,#{objectid},#{releaseid},#{evaluatetype},1,now())
	</insert>
	<!-- 读取指定的用户指定的小样或作品/演艺的点赞和好评情况-->
	<select id="getGoodLevel" parameterType="java.util.Map" resultType="Integer" >
		select evalevel
		from evaluation_details
		where objectid=#{objectid} and releaseid=#{releaseid} and typename='1' and evaluatetype=#{evaluatetype}
	</select>
	<!-- 艺人完成演艺后是否接受到发布人的打分评价-->
	<select id="isScore" parameterType="java.util.Map">
	select count(*)
	from artist_perfor_evaluate
	where uid=#{uid} and performanceid=#{performanceid}
	</select>
	<!-- 读取系统支持的用户可以打分评价项列表-->
	<select id="getScoreList" parameterType="java.util.Map" resultMap="scoreResult">
		select *
		from artist_evaluate_type
	</select>
	<resultMap type="ArtistEvaluateType" id="scoreResult">
		<id property="id" column="id" />
		<result property="evaluateId" column="evaluateId" />
		<result property="type" column="type" />
		<result property="value" column="value" />
	</resultMap>
	<!-- 读取艺人在指定演艺活动上得到的打分项-->
	<select id="getScoreArtistOfPerfor" parameterType="java.util.Map" resultMap="scoreProferResult">
		select *
		from artist_perfor_evaluate
		where uid=#{artistid} and performanceid=#{performanceid}
	</select>
	<resultMap type="ArtistPerforEvaluate" id="scoreProferResult">
		<id property="id" column="id" />
		<result property="uid" column="uid" />
		<result property="evaluateId" column="evaluateId" />
		<result property="type" column="type" />
		<result property="value" column="value" />
		<result property="performanceId" column="performanceid" />
	</resultMap>
	<!-- 读取艺人在指定演艺活动上得到的评论-->
	<select id="getCommentArtistOfPerfor" parameterType="java.util.Map" resultType="String">
		select description
		from evaluation_details
		where acceptid=#{artistid} and objectid=#{performanceid} and releaseid=#{uid} and typename=2
	</select>
	<!-- 对指定的小样或作品/演艺新建评论-->
	<insert id="newCommentArtist" parameterType="java.util.Map" >
		insert evaluation_details(id,typename,objectid,releaseid,evaluatetype,description,releasetime,acceptid)
		values(#{id},2,#{objectid},#{releaseid},#{evaluatetype},#{description},now(),#{artistid})
	</insert>
	
	<!-- 写入艺人完成演艺后的打分值，-->
	<insert id="addArtistPerforEvaluate"  parameterType="List">    
        insert into artist_perfor_evaluate (uid,evaluateid,type,value,performanceid)   
        values  
        <foreach collection="list" item="item" index="index"  separator="," >  
            (#{item.uid},#{item.evaluateId},#{item.type},#{item.value},#{item.performanceId})  
        </foreach>  
    </insert>  
    <!-- 读小样/作品的作者Id -->
    <select id="getOpusAuthor" parameterType="java.util.Map" resultType="String">
    select uid
    from artist_opus
    where oid =#{oid}
    </select>
	
	
	<!-- 新建评价 
	<insert id="insertEva" parameterType="java.util.Map">
	</insert>
	-->
	
	<!-- 每当用户维护自己的头像后将新上传的文件扩展名保存到艺人的pic字段中 -->
	<update id="updatePic" parameterType="java.util.Map">
		update artist set pic=#{pic}
		where id=#{artistid}
	</update>
	<!-- 为用户创建艺人信息,默认注册用户是不自动创建艺人信息的 -->
	<insert id="newArtist" parameterType="java.util.Map">
	insert into artist (id,stagename)values(#{uid},#{uid})
	</insert>
	<!-- 读取艺人详情供编辑和完善 -->
	<select id="getArtistById" parameterType="java.util.Map" resultMap="artistResult">
		select *
		from artist
		where id=#{artistid}
	</select>
	<resultMap type="ArtistSelfInfo" id="artistResult">
		<id property="id" column="id" />
		<result property="stageName" column="stagename" />
		<result property="performanceTypeId" column="performancetypeid" />
		<result property="specialty" column="specialty" />
		<result property="singularNum" column="singularnum" />
		<result property="completeNum" column="completenum" />
		<result property="fanNum" column="fannum" />
		<result property="rateOfpraise" column="rateofpraise" />
		<result property="birthday" column="birthday" />
		<result property="minSalary" column="minsalary" />
		<result property="address" column="address" />
		<result property="selfIntroduction" column="selfintroduction" />
		<result property="constellation" column="constellation" />
		<result property="bloodType" column="bloodtype" />
		<result property="stature" column="stature" />
		<result property="weight" column="weight" />
		<result property="bwh" column="bwh" />
		<result property="graduateSchool" column="graduateschool" />
		<result property="educationalBackground" column="educationalbackground" />
		<result property="artisticCareer" column="artisticcareer" />
		<result property="isAcceptInvitation" column="isacceptinvitation" />
		<result property="performanceList" column="performancelist" />
		<result property="biographyList" column="biographylist" />
		<result property="biographyHighest" column="biographyhighest" />
		<result property="isAuth" column="isauth" />
		<result property="honestyLevel" column="honestylevel" />
		<result property="pic" column="pic"/>
		<result property="sex" column="sex"/>
	</resultMap>
	<select id="getSimpleUserInfo" resultMap="simpleUserInfoResult">
		SELECT `user`.id,`user`.nickname,`user`.username,artist.pic
		from user
		LEFT JOIN artist on`user`.id=artist.id where`user`.id = #{uid}
	</select>
	<resultMap type="UserInfoSimple" id="simpleUserInfoResult">
		<id property="imgId" column="id" />
		<result property="pic" column="pic"/>
		<result property="userName" column="username"/>
		<result property="nickName" column="nickname"/>
	</resultMap>
	<!-- 修改艺人艺名 -->
	<update id="updateStageName" parameterType="java.util.Map">
		update artist set stagename=#{stageName}
		where id=#{artistId}
	</update>
	<!-- 修改艺人演艺经历 -->
	<update id="updatePerfor" parameterType="java.util.Map">
		update artist set performancelist=#{performancelist}
		where id=#{artistId}
	</update>
	<!-- 修改艺人获奖经历-->
	<update id="updateBiographyList" parameterType="java.util.Map">
		update artist set biographylist=#{biographylist}
		where id=#{artistId}
	</update>
	<!-- 修改艺人最高奖项-->
	<update id="updateBiographyHighest" parameterType="java.util.Map">
		update artist set biographyhighest=#{biographyhighest}
		where id=#{artistId}
	</update>
	<!-- 修改艺人自我介绍-->
	<update id="updateSelfIntro" parameterType="java.util.Map">
		update artist set selfintroduction=#{selfintroduction}
		where id=#{artistId}
	</update>
	<!-- 修改艺人擅长-->
	<update id="updateSpecialty" parameterType="java.util.Map">
		update artist set specialty=#{specialty}
		where id=#{artistId}
	</update>
	<!-- 修改艺人类型，艺人类型以-分隔的字符串-->
	<update id="updateType" parameterType="java.util.Map">
		update artist set performancetypeid=#{type}
		where id=#{artistId}
	</update>
	
	
	<!-- 获取指定艺人发布的某一演艺详情 -->
	<select id="getPerformanceDetailsOfUser"  resultMap="performanceResult">
		select <!-- ap.id,er.erid,er.performanceid -->
		* from
		art_performance ap where
		ap.id = #{performanceid} and ap.uid=#{uid}
	</select>
	<resultMap type="MyPerformanceDetail" id="performanceResult">
		<id property="id" column="id" />
		<result property="title" column="title" />
		<result property="releaseTime" column="releasetime" />
		<result property="auditState" column="auditstate" />
		<result property="address" column="address" />
		<result property="type" column="type" />
		<result property="performBeginTime" column="perform_begin_time" />
		<result property="performEndTime" column="perform_end_time" />
		<result property="require" column="require_" />
		<result property="salary" column="salary" />
		<result property="gender" column="gender" />
		<result property="salaryDescription" column="salarydescription" />
		<result property="contacts" column="contacts" />
		<result property="contactway" column="contactway" />
		<result property="signupNum" column="signup_num" />
		<result property="numberOfApplicants" column="numofapplicants" />
		<result property="endTime" column="endtime" />
		<result property="beginTime" column="begin_time" />
		<result property="signupState" column="signup_state" />
		<result property="stature" column="stature" />
		<result property="language" column="language" />
		
		<result property="city" column="city" />
		<!--  
		<collection property="entryRecords" javaType="ArrayList"
			column="erid" ofType="EntryRecord" resultMap="entryRecordResult"></collection>-->
	</resultMap>
	
	
</mapper>
